# -*- coding: utf-8 -*-
"""Preprocesamiento - Tesis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z035YizFDyP_FM60u5FL9MViU1-5-J7p
"""

import requests
import json
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

plt.style.use('seaborn')
mpl.rcParams.update({'axes.titlesize': 24,
                     'axes.labelsize': 20,
                     'lines.linewidth': 2,
                     'lines.markersize': 10,
                     'xtick.labelsize': 16,
                     'ytick.labelsize': 16,
                     'figure.figsize': (12, 8),
                     'legend.fontsize': 13,
                     'legend.handlelength': 2})

raw_data = pd.read_excel("Data1producto.xlsx", sheet_name="Main")

print(raw_data.tail(3))

raw_data = raw_data[raw_data.Country.isin(["United Kingdom"])]

print(raw_data.head(2))

raw_data["Total"] = raw_data.Quota * raw_data.Amount

raw_data.BillDate = pd.to_datetime(raw_data.BillDate)

raw_data["BillDate"]

#Obtener festividades de UK
#England y Wales comparten los mismos dias
url = "https://www.gov.uk/bank-holidays.json"
json_request = requests.get(url)
python_dict = json_request.json()

print(python_dict)

dfs = []
for country, data in python_dict.items():
    df = pd.DataFrame(data['events'])
    df['Country'] = country
    dfs.append(df)

bank_hols = pd.concat(dfs, ignore_index=True)

print(bank_hols.head(20))

raw_data["Month"] = raw_data.BillDate.dt.month
raw_data["nameofday"] = raw_data.BillDate.dt.day_name()
raw_data["day"] = raw_data.BillDate.dt.day
raw_data["dayofweek"] = raw_data.BillDate.dt.dayofweek
raw_data.loc[raw_data.dayofweek >= 5, "isWeekend"] = 1
raw_data.loc[raw_data.dayofweek < 5, "isWeekend"] = 0
raw_data["isHoliday"] = raw_data.BillDate.isin(bank_hols["date"])
raw_data.isHoliday = raw_data.isHoliday.map({True: 1, False: 0})
raw_data["Year"] = raw_data.BillDate.dt.year
raw_data["WeekOfYear"] = raw_data.BillDate.dt.weekofyear

raw_data

#Eliminamos las cantidades de venta negativas
raw_data = raw_data[raw_data.Quota >= 0]

holidays = bank_hols["date"]
holidays = pd.DatetimeIndex(holidays)
#cal = calendar()
#holidays = cal.holidays(start=raw_data['BillDate'].min(), end=raw_data['BillDate'].max())
print(type(holidays))

#raw_data["DE0"] = raw_data.isHoliday.map({True: 0, False: 1})
#Dia especial
raw_data["DE1"] = raw_data.isHoliday.map({True: 1, False: 0})
#1 dia antes
raw_data["DE2"] = raw_data["BillDate"].isin(holidays-pd.DateOffset(1)).map({True: 1, False: 0})
#1 dia despues
raw_data["DE3"] = raw_data["BillDate"].isin(holidays+pd.DateOffset(1)).map({True: 1, False: 0})
#7 dias despues
raw_data["DE4"] = raw_data["BillDate"].isin(holidays+pd.DateOffset(7)).map({True: 1, False: 0})

raw_data

raw_data_2 = raw_data.copy()

raw_data_2

for x in range(7): 
  raw_data_2.loc[raw_data_2['dayofweek']==x, 'Promedio'] = raw_data_2[raw_data_2['dayofweek']==x]['Quota'].mean()

raw_data_2.describe()

raw_data_2.loc[:, 'Dif.Abs.'] = np.abs(raw_data_2['Quota'] - raw_data_2['Promedio'])

raw_data_2.loc[:, 'Camb.Rel.'] = (raw_data_2['Quota'] - raw_data_2['Promedio']) / raw_data_2['Promedio']

raw_data_2.drop(columns=["Bill", "MerchandiseID", "Product", "CustomerID", "Country", "nameofday", "BillDate"], inplace=True)

raw_data_2.info()

data = raw_data_2.copy()d

data

data.to_csv("DatasetFinal.csv", index=False)

raw_data_promLunes = raw_data[raw_data.Quota == 1930]

raw_data_promLunes["PromDomingo"] = raw_data_promLunes.Quota.mean()

raw_data_promLunes

raw_data = pd.read_csv("DatasetFinal.csv")

raw_data_de = raw_data[raw_data.DE1 == 1]
raw_data_de2 = raw_data[raw_data.DE2 == 1]
raw_data_de3 = raw_data[raw_data.DE3 == 1]
raw_data_de4 = raw_data[raw_data.DE4 == 1]

raw_data_de

raw_data_de2

raw_data_de3

raw_data_de4

raw_data_de1 = raw_data[raw_data.isHoliday == 1]

raw_data_de1