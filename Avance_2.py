# -*- coding: utf-8 -*-
"""Test 1 Keras

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zXQIEF2z9kYjHnrbhgaHdU8Su8qGSQq-
"""

import tensorflow as tf 
import pandas as pd
from keras.optimizers import SGD
from keras.models import Sequential
from keras.layers import Dense, Activation, BatchNormalization, Input
from numpy import loadtxt

dataset = pd.read_csv('dataset.csv')
#X atributos de entrada 
X = dataset[:, 0:3]
#y es el target que queremos predecir  
y = dataset[:, 3]

#---------------------------#
#        Topologia          #
#         [3-2-1]           #
#---------------------------#

model = Sequential([
    Input(input_shape = X.shape)
    BatchNormalization(),
    #glorot_normal = Xaviers Initialization como tecnica inicializar los pesos de las conexiones
    Dense(3, kernel_initializer="glorot_normal", use_bias=False),
    #Ayuda a evitar el desvanecimiento de la grandiente obtenida de backpropagation
    BatchNormalization(),
    #Funcion de actviacion escogida fue TangenteHiperbolica [-1,+1]
    Activation("tanh"),
    #glorot_normal = Xaviers Initialization como tecnica inicializar los pesos de las conexiones
    Dense(2, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    #Capa de salida con 1 neurona 
    Dense(1)
])

#Utilizacion de Stochastic Gradient Deschent para la optimizacion de la topologia 
optimizer = SGD()

#MSE como funcion de costo, para determinar el error. 
model.compile(loss='mean_square_error', optimizer=sgd, metrics=['mean_squared_error'])

#Entrenamiento del modelo, dividido en 150 epocas, con un batch de tamano 10
model.fit(X, y, epochs=150, batch_size=10)

#Se evalua el modelo utilizando mse 
score = model.evaluate(X, y)
print(f"Score: {score:.2f}")


#---------------------------#
#        Topologia          #
#         [3-3-2-1]         #
#---------------------------#

model = Sequential([
    Input(input_shape = X.shape)
    BatchNormalization(),
    Dense(3, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(3, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(2, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    #Capa de salida con 1 neurona 
    Dense(1)
])
optimizer = SGD()
model.compile(loss='mean_square_error', optimizer=sgd, metrics=['mean_squared_error'])
model.fit(X, y, epochs=150, batch_size=10)

score = model.evaluate(X, y)
print(f"Score: {score:.2f}")


#---------------------------#
#         Topologia         #
#        [3-4-5-5-1]        #
#---------------------------#

model = Sequential([
    Input(input_shape = X.shape)
    BatchNormalization(),
    Dense(3, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(4, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(5, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(5, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    #Capa de salida con 1 neurona 
    Dense(1)
])
optimizer = SGD()
model.compile(loss='mean_square_error', optimizer=sgd, metrics=['mean_squared_error'])
model.fit(X, y, epochs=150, batch_size=10)

score = model.evaluate(X, y)
print(f"Score: {score:.2f}")

#---------------------------#
#         Topologia         #
#        [3-6-5-6-6-5]      #
#---------------------------#

model = Sequential([
    Input(input_shape = X.shape)
    BatchNormalization(),
    Dense(6, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(5, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(6, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(6, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    Dense(5, kernel_initializer="glorot_normal", use_bias=False),
    BatchNormalization(),
    Activation("tanh"),
    #Capa de salida con 1 neurona 
    Dense(1)
])
optimizer = SGD()
model.compile(loss='mean_square_error', optimizer=sgd, metrics=['mean_squared_error'])
model.fit(X, y, epochs=150, batch_size=10)

score = model.evaluate(X, y)
print(f"Score: {score:.2f}")

"""# New Section"""